// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?


function findTriangleNumberWithDivisorCount(limit) {
    //create triangle
    let triangle = 1;
    let i = 2
    let limitBreak = false
    while(!limitBreak){
        triangle += i

        let triangleBase = triangle
        let j = 2;
        let divisibles = [1]
        let divisiblesEnd = [triangle]
        while(j < Math.floor(Math.sqrt(triangle, 2))) {
            if(triangle % j === 0){ 
                divisibles.push(j)
                triangleBase = triangle / j
                divisiblesEnd.unshift(triangleBase)
            }
            j++
        }
        let total = divisibles.concat(divisiblesEnd)
        if(total.length >= limit){
            limitBreak = true
        }
        i++
    }

    return triangle
}

console.log(findTriangleNumberWithDivisorCount(500))